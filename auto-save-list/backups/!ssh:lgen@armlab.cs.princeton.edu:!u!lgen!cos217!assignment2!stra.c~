/*--------------------------------------------------------------------*/
/* stra.c                                                             */
/* implements a bunch of string functions                             */
/* Lucas Gen                                                          */
/*--------------------------------------------------------------------*/


#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <assert.h>
#include <string.h>
#include "str.h"




size_t Str_getLength(const char pcSrc[])
{
  size_t uLength = 0;
  assert(pcSrc != NULL);
  while (pcSrc[uLength] != '\0')
    uLength++;
  return uLength;
}


char * Str_copy(char str1[], const char str2[])
{
  size_t index = 0;
  char current_char;
  assert(str1 != NULL);
  assert(str2 != NULL);

  while (str2[index] != '\0')
    {
      current_char = str2[index];
      str1[index] = current_char;
      index++;
    }
  str1[index] = '\0';

  return &str1[0];
}


char * Str_concat(char str1[], const char str2[])
{
  size_t index;
  char current_char;
  size_t str1_length;
  
  assert(str1 != NULL);
  assert(str2 != NULL);

  str1_length = Str_getLength(str1);
  index = 0;

  while (str2[index] != '\0')
    {
      current_char = str2[index];
      str1[str1_length + index] = current_char;
      index++;
    }
    str1[str1_length + index] = '\0';

    /* pointer = &str1 */
    return &str1[0];
}

int Str_compare(const char str1[], const char str2[])
{
  char char1;
  char char2;
  int i;

  assert(str1 != NULL);
  assert(str2 != NULL);

  i = 0;
  
  while (str1[i] != '\0' && str2[i] != '\0')
    {
      char1 = str1[i];
      char2 = str2[i];

      if (char1 < char2)
        {
          return -1;
        }
      else if (char1 > char2)
        {
          return 1;
        }
      else
        {
          i++;
        }
    }

  if (str1[i] == '\0' && str2[i] == '\0')
    {
      return 0;
    }
  else if (str1[i] == '\0')
    {
      return -1;
    }
  else
    {
      return 1;
    }
  
  
}


char * Str_search(const char str1[], const char str2[])
{
  size_t index = 0;
  size_t counter = 0;
  size_t length_of_str2;

  assert(str1 != NULL);
  assert(str2 != NULL);

  length_of_str2 = Str_getLength(str2);

  /* returns the haystack if the needle is empty */
  if(str2[0] == '\0')
    {
      return (char*)&str1[0];
    }
  
  while (str1[index] != '\0')
    {
          counter = 0;
          while (str1[index + counter] == str2[counter] && str1[index+counter] != '\0')
            {
              if (counter == (length_of_str2 - 1))
                {
                  return (char*)&str1[index];
                }
              counter = counter + 1;
            }
      index = index + 1;
    }
  return NULL;
}
