=====================================================================
PROBLEM 4 - "FUN" DEBUGGING - 12 points / 80 total on exam
=====================================================================

Consider the following function, which copies characters from the
source string into the destination string, but unlike in strcpy:
* only some characters from the source are copied;
* they're not necessarily consecutive characters from the source;
* their order from the source is reversed in the destination.

The destination string must have enough space for the copied
characters, but all its allocated space can be assumed to be filled
with '\0' bytes, such as if it were allocated with calloc. If the
source string is NULL or the empty string, then no change is made to
the destination string and the function returns NULL.

For example, assuming buf has enough space:
fun(buf, "ab") should result in buf: "b"
fun(buf, "abc") should result in buf: "b"
fun(buf, "abcd") should result in buf: "cb"
fun(buf, "abcde") should result in buf: "cb"
fun(buf, "abcdefghijklmnopqrstuvwxyz") should result in buf: "ngdb"


     1	#include <string.h>
     2	#include <assert.h>
     3
     4	char* fun(char* d, char* s) {
     5	  int i, j;
     6	  assert(sizeof(d) > sizeof(s));
     7	  if(strlen(s) == 0 || s == NULL)
     8	    return NULL;
     9	  for(i = strlen(s); i /= 2; ) {
    10	    d[j++] = s[i];
    11	  }
    12	  return d;
    13	}


It has 4 bugs that cause warnings or errors from gcc217, runtime
crashes, or incorrect contents copied into the destination string.

In the spaces provided below, identify 3 such bugs. (We will read only
the first 3 you supply, so there is no benefit to listing more.) The 3
bugs need not be distinct: if the same error occurs multiple times,
you may include it as multiple bugs.

Identify the bugs by line, with a short description of the problem
(e.g. "infinite loop", "accesses array out of bounds", "missing ;
after do-while loop") and how it could be fixed (e.g. "start i at 1
not 0", "bound loop with < n not <= n", "add ;", respectively). Be
concise in your explanations: there is no need for complete sentences
or elaborate descriptions.


Bug 1 Line:
Bug 1 Idea:
Bug 1 Fix :

Bug 2 Line:
Bug 2 Idea:
Bug 2 Fix :

Bug 3 Line:
Bug 3 Idea:
Bug 3 Fix :

