let rec find_zero_exact (e:expression) : expression option =
  (* 
this function returns a pair of the total coefficients of x
and the total constants
   *)
  let rec get_all_nums (exp:expression) (constant: float) (coefficient: float)
            (multiplier: float) : float * float =
    match exp with
    | Num f -> ((coefficient), (constant +. f))
    | Var -> ((coefficient +. 1.0), constant)
    | Binop (binop, expression1, expression2) ->
       match expression1, expression2 with
       | Num f, Num g ->
          (* add the sum/difference/product to the list *)
          (match binop with
           | Add -> ((multiplier *. coefficient),
                     (constant +. (multiplier *. (g +. f))))
           | Sub -> ((multiplier *. coefficient),
                     (constant +. (multiplier *. (g -. f))))
           | Mul -> ((multiplier *. coefficient),
                     (constant +. (multiplier *. (g *. f)))))
       | Binop (x, y, z), Num g ->
          (* records the constant and solves for the binop *)
          (match binop with
           | Add -> get_all_nums expression1 ((multiplier *. g) +. constant)
                      coefficient multiplier
           | Sub -> get_all_nums expression1
                      ((0.0 -. (multiplier *. g))
                       +. constant) coefficient multiplier
           | Mul -> get_all_nums expression1 constant
                      coefficient (g *. multiplier))
       | Num f, Binop (x, y, z) ->
          (* revords the constant and solves for the binop *)
          (match binop with
           | Add -> get_all_nums expression2 ((multiplier *. f) +. constant)
                      coefficient multiplier
           | Sub -> get_all_nums expression2 ((multiplier *. f) +. constant)
                      coefficient (multiplier *. -1.0)
           | Mul -> get_all_nums expression2 constant coefficient
                      (f *. multiplier))
       | Num f, Var ->
          (* records the constant and/or coefficient *)
          (match binop with
           | Add ->
              if coefficient = 0.0 then
                ((multiplier *. 1.0), (constant +. (multiplier *. f)))
              else
                ((multiplier *. coefficient), (constant +. (multiplier *. f)))
           | Sub ->
              if coefficient = 0.0 then
                ((multiplier *. (-1.0 *. 1.0)), (constant +.
                                                   (multiplier *. f)))
              else
                ((multiplier *. (-1.0 *. coefficient)),
                 (constant +. (multiplier *. f)))
           | Mul ->
              if coefficient = 0.0 then
                ((multiplier *. (1.0 *. f)), constant)
              else
                ((multiplier *. (coefficient *. f)), constant))
       | Var, Num g ->
          (* records the constant and/or coefficient *)
          (match binop with
           | Add ->
              if coefficient = 0.0 then
                ((multiplier *. 1.0), (constant +. (multiplier *. g)))
              else
                ((multiplier *. coefficient), (constant +. (multiplier *. g)))
           |Sub ->
             if coefficient = 0.0 then
               ((multiplier *. 1.0), (constant -. (multiplier *. g)))
             else
               ((multiplier *. coefficient), (constant -. (multiplier *. g)))
           | Mul ->
              if coefficient = 0.0 then
                ((multiplier *. (1.0 *. g)), constant)
              else
                ((multiplier *. (coefficient *. g)), constant))
       | Var, Var -> (coefficient, constant)
       | Binop (x, y, z), Var ->
          (* records the variable and solves for the binop *)
          (match binop with
           | Add ->
              if coefficient = 0.0 then
                get_all_nums expression1 constant 1.0 multiplier
              else
                get_all_nums expression1 constant (coefficient +. 1.0)
                  multiplier
           | Sub ->
              if coefficient = 0.0 then
                get_all_nums expression1 constant (-1.0) multiplier
              else
                get_all_nums expression1 constant (coefficient -. 1.0)
                  multiplier
           | Mul -> 
              get_all_nums expression1 constant (coefficient) multiplier)

       | Var, Binop (x, y, z) ->
          (* records the variable and solves for the binop *)
          (match binop with
           | Add ->
              if coefficient = 0.0 then
                get_all_nums expression2 constant 1.0 multiplier
              else
                get_all_nums expression2 constant (coefficient +. 1.0)
                  multiplier
           | Sub ->
              if coefficient = 0.0 then
                get_all_nums expression2 constant (-1.0) multiplier
              else
                get_all_nums expression2 constant (coefficient -. 1.0)
                  multiplier
           | Mul -> 
              get_all_nums expression2 constant (coefficient) multiplier)
       | Binop (a, b, c), Binop (x, y, z) ->
          (* solves for both binops and deals with their solutions accordingly*)
          (match binop with
           | Add ->
              let new_pair = get_all_nums expression1 constant coefficient
                               multiplier in
              (match new_pair with
               | (new_coefficient, new_constant) ->
                  let second_pair = get_all_nums expression2 new_constant
                                      coefficient multiplier in
                  match second_pair with
                  | (second_coefficient, second_constant) ->
                     ((second_coefficient +. new_coefficient), second_constant))
           | Sub ->
              let new_pair = get_all_nums expression1 constant coefficient
                               multiplier in
              (match new_pair with
               | (new_coefficient, new_constant) ->
                  let second_pair = get_all_nums expression2 new_constant
                                      coefficient (multiplier *. -1.0) in
                  match second_pair with
                  | (second_coefficient, second_constant) ->
                     ((new_coefficient +. second_coefficient), second_constant))
           | Mul ->
              let new_pair = get_all_nums expression1 constant coefficient
                               multiplier in
              (match new_pair with
               | (new_coefficient, new_constant) ->
                  get_all_nums expression2 constant coefficient
                    (multiplier *. new_constant)))
  in
  let formula = get_all_nums e 0.0 0.0 1.0 in
  match formula with
  | (coefficient, constant) ->
     let answer = ((0.0 -. constant) /. coefficient) in
     if evaluate e answer = 0.0 then
       Some (Num answer)
     else None