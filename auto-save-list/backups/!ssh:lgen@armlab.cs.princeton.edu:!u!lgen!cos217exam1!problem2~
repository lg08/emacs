=====================================================================
PROBLEM 2 - MEMORY SECTIONS - 22 points / 80 total on exam
=====================================================================

Consider the following program that contains 9 numbered location
callouts, labeled /*0*/ through /*8*/:

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int main(/*0*/ int argc, /*1*/ char** argv) {
  /*2*/ int a[10] = {-1, 0, 1};
  /*3*/ double x = 10.75;
  /*4*/ double* px = &x;
  /*5*/ char* s;
  /*6*/ char* f = /*7*/ "\"%s\"\n";
  s = /*8*/ calloc(*px, sizeof(*s));
  printf(f, s);
  return strlen(s);
}


a. In the table below, indicate how many bytes are allocated, and in
   which section of memory, for the expression immediately following
   each callout. Assume this is using gcc217 on armlab, and that the
   calloc call does not return NULL. If no memory is allocated by the
   expression, indicate this by putting 0 for the number of bytes and
   NONE as the section.

         Bytes     Section
/*0*/
/*1*/
/*2*/
/*3*/
/*4*/
/*5*/
/*6*/
/*7*/
/*8*/


b. What does this program print? (You can indicate a newline with the
   character L, for line, which is not otherwise in the output.)

Output:


c. How would the program's return value change if this line:
        s = calloc(x, sizeof(*s));
   were replaced by this line:
        s = malloc(x*sizeof(*s));
   Like with calloc, assume the malloc call does not return NULL.

Answer:


