/* implements a bunch of string functions */
/* Lucas Gen */


#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <assert.h>
#include <string.h>
#include "str.h"


size_t Str_getLength(const char *pcSrc)
{
   const char *pcEnd;
   assert(pcSrc != NULL);
   pcEnd = pcSrc;
   while (*pcEnd != '\0')
      pcEnd++;
   return (size_t)(pcEnd - pcSrc);
}


char * Str_copy(char *str1, const char *str2)
{
  char *str1p;
  const char *str2p;
  
  assert(str1 != NULL);
  assert(str2 != NULL);

  str1p = str1;
  str2p = str2;

  while (*str2p != '\0')
    {
      *str1p = *str2p;
      str1p++;
      str2p++;
    }
  *str1p = '\0';
  return str1;
}


char *Str_concat(char *str1, const char *str2)
{
  char *str1p;
  const char *str2p;
  size_t str1_length;

  assert(str1 != NULL);
  assert(str2 != NULL);

  str1p = str1;
  str2p = str2;
  str1_length = Str_getLength(str1p);
  str1p = str1p + str1_length;

  /* Str_copy(str1p,str2p); */
  while (*str2p != '\0')
    {
      *str1p = *str2p;
      str1p++;
      str2p++;
    }
  *str1p = '\0';  
  return str1;
}

int Str_compare(const char *str1, const char *str2)
{
  char char1;
  char char2;
  const char *str1p;
  const char *str2p;

  assert(str1 != NULL);
  assert(str2 != NULL);
  
  str1p = str1;
  str2p = str2;


  while (*str1p != '\0' && *str2p != '\0')
    {
      char1 = *str1p;
      char2 = *str2p;
      
      if (char1 < char2)
        {
          return -1;
        }
      else if (char1 > char2)
        {
          return 1;
        }

      str1p++;
      str2p++;
    }

  if (*str1p == '\0' && *str2p == '\0')
    {
      return 0;
    }
  else if (*str1p == '\0')
    {
      return -1;
    }
  else
    {
      return 1;
    }

}

char *Str_search(const char *str1, const char *str2)
{

  /* printf("the search has begun"); */
  const char *str1p;
  const char *str2p;
  const char *mini_pointer1;
  const char *mini_pointer2;
  size_t length_of_str2;

  assert(str1 != NULL);
  assert(str2 != NULL);  

  str1p = str1;
  str2p = str2;
  length_of_str2 = Str_getLength(str2p);


    /* returns the haystack if the needle is empty */
  if (*str2p == '\0')
    {
      return (char*)str1p;
    }


  while (*str1p != '\0')
    {
          mini_pointer1 = str1p;
          mini_pointer2 = str2p;
          while (*mini_pointer1 == *mini_pointer2 && *mini_pointer1 != '\0')
            {
              if ((size_t)(mini_pointer1-str1p) == (length_of_str2 - 1))
                {
                  return (char*)str1p;
                }
              mini_pointer1++;
              mini_pointer2++;
            }
      str1p++;
    
    }

  return NULL;
}
